// Code generated by Prisma (prisma@1.34.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  grade: (where?: GradeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  grade: (where: GradeWhereUniqueInput) => GradeNullablePromise;
  grades: (args?: {
    where?: GradeWhereInput;
    orderBy?: GradeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Grade>;
  gradesConnection: (args?: {
    where?: GradeWhereInput;
    orderBy?: GradeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GradeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGrade: (data: GradeCreateInput) => GradePromise;
  updateGrade: (args: {
    data: GradeUpdateInput;
    where: GradeWhereUniqueInput;
  }) => GradePromise;
  updateManyGrades: (args: {
    data: GradeUpdateManyMutationInput;
    where?: GradeWhereInput;
  }) => BatchPayloadPromise;
  upsertGrade: (args: {
    where: GradeWhereUniqueInput;
    create: GradeCreateInput;
    update: GradeUpdateInput;
  }) => GradePromise;
  deleteGrade: (where: GradeWhereUniqueInput) => GradePromise;
  deleteManyGrades: (where?: GradeWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  grade: (
    where?: GradeSubscriptionWhereInput
  ) => GradeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GradeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "grade_ASC"
  | "grade_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneWithoutGradeInput {
  create?: Maybe<UserCreateWithoutGradeInput>;
  update?: Maybe<UserUpdateWithoutGradeDataInput>;
  upsert?: Maybe<UserUpsertWithoutGradeInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type GradeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GradeUpdateManyWithoutOwnerInput {
  create?: Maybe<GradeCreateWithoutOwnerInput[] | GradeCreateWithoutOwnerInput>;
  delete?: Maybe<GradeWhereUniqueInput[] | GradeWhereUniqueInput>;
  connect?: Maybe<GradeWhereUniqueInput[] | GradeWhereUniqueInput>;
  set?: Maybe<GradeWhereUniqueInput[] | GradeWhereUniqueInput>;
  disconnect?: Maybe<GradeWhereUniqueInput[] | GradeWhereUniqueInput>;
  update?: Maybe<
    | GradeUpdateWithWhereUniqueWithoutOwnerInput[]
    | GradeUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | GradeUpsertWithWhereUniqueWithoutOwnerInput[]
    | GradeUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<GradeScalarWhereInput[] | GradeScalarWhereInput>;
  updateMany?: Maybe<
    GradeUpdateManyWithWhereNestedInput[] | GradeUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  grade?: Maybe<GradeCreateManyWithoutOwnerInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  grade?: Maybe<GradeUpdateManyWithoutOwnerInput>;
}

export interface UserUpsertWithoutGradeInput {
  update: UserUpdateWithoutGradeDataInput;
  create: UserCreateWithoutGradeInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface GradeCreateInput {
  id?: Maybe<ID_Input>;
  grade?: Maybe<Float>;
  owner?: Maybe<UserCreateOneWithoutGradeInput>;
}

export interface GradeUpdateManyWithWhereNestedInput {
  where: GradeScalarWhereInput;
  data: GradeUpdateManyDataInput;
}

export interface UserCreateOneWithoutGradeInput {
  create?: Maybe<UserCreateWithoutGradeInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface GradeUpsertWithWhereUniqueWithoutOwnerInput {
  where: GradeWhereUniqueInput;
  update: GradeUpdateWithoutOwnerDataInput;
  create: GradeCreateWithoutOwnerInput;
}

export interface UserCreateWithoutGradeInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface GradeUpdateWithoutOwnerDataInput {
  grade?: Maybe<Float>;
}

export interface GradeUpdateInput {
  grade?: Maybe<Float>;
  owner?: Maybe<UserUpdateOneWithoutGradeInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  grade_every?: Maybe<GradeWhereInput>;
  grade_some?: Maybe<GradeWhereInput>;
  grade_none?: Maybe<GradeWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface GradeCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  grade?: Maybe<Float>;
}

export interface GradeUpdateManyDataInput {
  grade?: Maybe<Float>;
}

export interface GradeCreateManyWithoutOwnerInput {
  create?: Maybe<GradeCreateWithoutOwnerInput[] | GradeCreateWithoutOwnerInput>;
  connect?: Maybe<GradeWhereUniqueInput[] | GradeWhereUniqueInput>;
}

export interface GradeUpdateManyMutationInput {
  grade?: Maybe<Float>;
}

export interface GradeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  grade?: Maybe<Float>;
  grade_not?: Maybe<Float>;
  grade_in?: Maybe<Float[] | Float>;
  grade_not_in?: Maybe<Float[] | Float>;
  grade_lt?: Maybe<Float>;
  grade_lte?: Maybe<Float>;
  grade_gt?: Maybe<Float>;
  grade_gte?: Maybe<Float>;
  owner?: Maybe<UserWhereInput>;
  AND?: Maybe<GradeWhereInput[] | GradeWhereInput>;
  OR?: Maybe<GradeWhereInput[] | GradeWhereInput>;
  NOT?: Maybe<GradeWhereInput[] | GradeWhereInput>;
}

export interface UserUpdateWithoutGradeDataInput {
  name?: Maybe<String>;
}

export interface GradeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  grade?: Maybe<Float>;
  grade_not?: Maybe<Float>;
  grade_in?: Maybe<Float[] | Float>;
  grade_not_in?: Maybe<Float[] | Float>;
  grade_lt?: Maybe<Float>;
  grade_lte?: Maybe<Float>;
  grade_gt?: Maybe<Float>;
  grade_gte?: Maybe<Float>;
  AND?: Maybe<GradeScalarWhereInput[] | GradeScalarWhereInput>;
  OR?: Maybe<GradeScalarWhereInput[] | GradeScalarWhereInput>;
  NOT?: Maybe<GradeScalarWhereInput[] | GradeScalarWhereInput>;
}

export interface GradeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GradeWhereInput>;
  AND?: Maybe<GradeSubscriptionWhereInput[] | GradeSubscriptionWhereInput>;
  OR?: Maybe<GradeSubscriptionWhereInput[] | GradeSubscriptionWhereInput>;
  NOT?: Maybe<GradeSubscriptionWhereInput[] | GradeSubscriptionWhereInput>;
}

export interface GradeUpdateWithWhereUniqueWithoutOwnerInput {
  where: GradeWhereUniqueInput;
  data: GradeUpdateWithoutOwnerDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface GradeEdge {
  node: Grade;
  cursor: String;
}

export interface GradeEdgePromise extends Promise<GradeEdge>, Fragmentable {
  node: <T = GradePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GradeEdgeSubscription
  extends Promise<AsyncIterator<GradeEdge>>,
    Fragmentable {
  node: <T = GradeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GradeSubscriptionPayload {
  mutation: MutationType;
  node: Grade;
  updatedFields: String[];
  previousValues: GradePreviousValues;
}

export interface GradeSubscriptionPayloadPromise
  extends Promise<GradeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GradePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GradePreviousValuesPromise>() => T;
}

export interface GradeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GradeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GradeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GradePreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Grade {
  id: ID_Output;
  grade?: Float;
}

export interface GradePromise extends Promise<Grade>, Fragmentable {
  id: () => Promise<ID_Output>;
  grade: () => Promise<Float>;
  owner: <T = UserPromise>() => T;
}

export interface GradeSubscription
  extends Promise<AsyncIterator<Grade>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  grade: () => Promise<AsyncIterator<Float>>;
  owner: <T = UserSubscription>() => T;
}

export interface GradeNullablePromise
  extends Promise<Grade | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  grade: () => Promise<Float>;
  owner: <T = UserPromise>() => T;
}

export interface GradePreviousValues {
  id: ID_Output;
  grade?: Float;
}

export interface GradePreviousValuesPromise
  extends Promise<GradePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  grade: () => Promise<Float>;
}

export interface GradePreviousValuesSubscription
  extends Promise<AsyncIterator<GradePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  grade: () => Promise<AsyncIterator<Float>>;
}

export interface GradeConnection {
  pageInfo: PageInfo;
  edges: GradeEdge[];
}

export interface GradeConnectionPromise
  extends Promise<GradeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GradeEdge>>() => T;
  aggregate: <T = AggregateGradePromise>() => T;
}

export interface GradeConnectionSubscription
  extends Promise<AsyncIterator<GradeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GradeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGradeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateGrade {
  count: Int;
}

export interface AggregateGradePromise
  extends Promise<AggregateGrade>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGradeSubscription
  extends Promise<AsyncIterator<AggregateGrade>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  grade: <T = FragmentableArray<Grade>>(args?: {
    where?: GradeWhereInput;
    orderBy?: GradeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  grade: <T = Promise<AsyncIterator<GradeSubscription>>>(args?: {
    where?: GradeWhereInput;
    orderBy?: GradeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  grade: <T = FragmentableArray<Grade>>(args?: {
    where?: GradeWhereInput;
    orderBy?: GradeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Grade",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/byron-miller-157f0a/hello-world/dev`
});
export const prisma = new Prisma();
