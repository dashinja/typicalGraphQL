// Code generated by Prisma (prisma@1.34.6). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateGrade {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Grade {
  id: ID!
  grade: Float
  owner: User
}

type GradeConnection {
  pageInfo: PageInfo!
  edges: [GradeEdge]!
  aggregate: AggregateGrade!
}

input GradeCreateInput {
  id: ID
  grade: Float
  owner: UserCreateOneWithoutGradeInput
}

input GradeCreateManyWithoutOwnerInput {
  create: [GradeCreateWithoutOwnerInput!]
  connect: [GradeWhereUniqueInput!]
}

input GradeCreateWithoutOwnerInput {
  id: ID
  grade: Float
}

type GradeEdge {
  node: Grade!
  cursor: String!
}

enum GradeOrderByInput {
  id_ASC
  id_DESC
  grade_ASC
  grade_DESC
}

type GradePreviousValues {
  id: ID!
  grade: Float
}

input GradeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  grade: Float
  grade_not: Float
  grade_in: [Float!]
  grade_not_in: [Float!]
  grade_lt: Float
  grade_lte: Float
  grade_gt: Float
  grade_gte: Float
  AND: [GradeScalarWhereInput!]
  OR: [GradeScalarWhereInput!]
  NOT: [GradeScalarWhereInput!]
}

type GradeSubscriptionPayload {
  mutation: MutationType!
  node: Grade
  updatedFields: [String!]
  previousValues: GradePreviousValues
}

input GradeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GradeWhereInput
  AND: [GradeSubscriptionWhereInput!]
  OR: [GradeSubscriptionWhereInput!]
  NOT: [GradeSubscriptionWhereInput!]
}

input GradeUpdateInput {
  grade: Float
  owner: UserUpdateOneWithoutGradeInput
}

input GradeUpdateManyDataInput {
  grade: Float
}

input GradeUpdateManyMutationInput {
  grade: Float
}

input GradeUpdateManyWithoutOwnerInput {
  create: [GradeCreateWithoutOwnerInput!]
  delete: [GradeWhereUniqueInput!]
  connect: [GradeWhereUniqueInput!]
  set: [GradeWhereUniqueInput!]
  disconnect: [GradeWhereUniqueInput!]
  update: [GradeUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [GradeUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [GradeScalarWhereInput!]
  updateMany: [GradeUpdateManyWithWhereNestedInput!]
}

input GradeUpdateManyWithWhereNestedInput {
  where: GradeScalarWhereInput!
  data: GradeUpdateManyDataInput!
}

input GradeUpdateWithoutOwnerDataInput {
  grade: Float
}

input GradeUpdateWithWhereUniqueWithoutOwnerInput {
  where: GradeWhereUniqueInput!
  data: GradeUpdateWithoutOwnerDataInput!
}

input GradeUpsertWithWhereUniqueWithoutOwnerInput {
  where: GradeWhereUniqueInput!
  update: GradeUpdateWithoutOwnerDataInput!
  create: GradeCreateWithoutOwnerInput!
}

input GradeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  grade: Float
  grade_not: Float
  grade_in: [Float!]
  grade_not_in: [Float!]
  grade_lt: Float
  grade_lte: Float
  grade_gt: Float
  grade_gte: Float
  owner: UserWhereInput
  AND: [GradeWhereInput!]
  OR: [GradeWhereInput!]
  NOT: [GradeWhereInput!]
}

input GradeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createGrade(data: GradeCreateInput!): Grade!
  updateGrade(data: GradeUpdateInput!, where: GradeWhereUniqueInput!): Grade
  updateManyGrades(data: GradeUpdateManyMutationInput!, where: GradeWhereInput): BatchPayload!
  upsertGrade(where: GradeWhereUniqueInput!, create: GradeCreateInput!, update: GradeUpdateInput!): Grade!
  deleteGrade(where: GradeWhereUniqueInput!): Grade
  deleteManyGrades(where: GradeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  grade(where: GradeWhereUniqueInput!): Grade
  grades(where: GradeWhereInput, orderBy: GradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Grade]!
  gradesConnection(where: GradeWhereInput, orderBy: GradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GradeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  grade(where: GradeSubscriptionWhereInput): GradeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  grade(where: GradeWhereInput, orderBy: GradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Grade!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  grade: GradeCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutGradeInput {
  create: UserCreateWithoutGradeInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGradeInput {
  id: ID
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  grade: GradeUpdateManyWithoutOwnerInput
}

input UserUpdateManyMutationInput {
  name: String
}

input UserUpdateOneWithoutGradeInput {
  create: UserCreateWithoutGradeInput
  update: UserUpdateWithoutGradeDataInput
  upsert: UserUpsertWithoutGradeInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutGradeDataInput {
  name: String
}

input UserUpsertWithoutGradeInput {
  update: UserUpdateWithoutGradeDataInput!
  create: UserCreateWithoutGradeInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  grade_every: GradeWhereInput
  grade_some: GradeWhereInput
  grade_none: GradeWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`